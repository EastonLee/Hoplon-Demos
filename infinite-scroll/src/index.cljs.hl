(page "index.html"
  (:require [flickr :as flickr]))

(def queries
  "Flickr search API queries, will be chosen randomly and submitted to obtain
  interesting images which will be displayed in the scrolling div."
  ["wtf"     "meme"     "happy"     "jewels"      "farming"     "flamenco"
   "omg"     "blue"     "green"     "castles"     "goodbye"     "spaghetti"
   "sad"     "love"     "space"     "haircut"     "amazing"     "hilarious"
   "red"     "hate"     "tango"     "tractor"     "awesome"     "submarines"
   "nyc"     "nasa"     "ships"     "hunting"     "alabama"     "motorcycles"
   "hey"     "fool"     "funny"     "sailing"     "bananas"     "underground"])

(defc  state    "The current list of image urls."            [])
(defc  error    "The last XHR error."                        nil)
(defc  loading  "A vector of in-progress async calls."       [])
(defc= loading? "True if there are in-progress async calls." (seq loading))

(defn fetch-images!
  "Fetch some images from the Flickr API and append them to the state cell."
  []
  (when-not @loading?
    (reset! error nil)
    (swap! loading conj :loading)
    (let [q (rand-nth queries)]
      (flickr/image-search q
        #(do (swap! loading pop) (swap! state into %))
        #(do (swap! loading pop) (reset! error :error))))))

(defmethod on! :scroll-end
  ;; Add the :scroll-end attribute, which fires its callback when the element is
  ;; scrolled down as far as it can go--to the bottom.
  [elem _ callback]
  (on! elem :scroll
    #(let [el (.-target %)
           ch (.-clientHeight el)
           sh (.-scrollHeight el)
           st (.-scrollTop    el)
           at-end? (= ch (- sh st))]
       (when at-end? (callback %)))))

;; initialize the application state by fetching a batch of images
(with-init! (fetch-images!))

(html :lang "en"
  (head
    (html-meta :charset "utf-8")
    (title "Hoplon â€¢ Infinite Scroll Demo")
    (link :rel "stylesheet" :type "text/css" :href "css/main.css"))
  (body
    (div :id "container"
      (h1 "Infinite Scrolling")
      (p "Scroll down to see more images...")
      (div :id "wrapper"
        (div :id "loading" :toggle loading? "LOADING IMAGES...")
        (div :id "error" :toggle error
          "Error fetching images: "
          (a :href "javascript:void(0)" :click fetch-images! "try again"))
        (div :id "scroll" :scroll-end fetch-images!
          (loop-tpl :bindings [{:keys [link image]} state]
            (div (a :href link :target "_blank" (img :src image)))))
        (p (a :href "https://github.com/tailrecursion/hoplon-demos/tree/master/infinite-scroll/src/index.cljs.hl" "Source Code"))))))
