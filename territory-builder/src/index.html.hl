<script type="text/hoplon">
(page "index.html"
        (:refer-hoplon :exclude  [center])
        (:require
             [hoplon.google.jsapi.maps :as m :refer  [google-map point-in-polygon]]
             [hoplon.google.jsapi.loader     :refer  [api-key]]
             [tailrecursion.hoplon.reload    :refer  [reload-all]]
             [tailrecursion.castra     :as c :refer  [mkremote]]
             [hoplon.twitter.bootstrap :as b :refer  [container tab tabs]]))

(reload-all)
(reset! api-key "AIzaSyDGqkxjAuq4IeG7rUt6C33Jsiv41bkQfBk")
(def miami-beach              {:name "Miami Beach"   :lat 25.8130 :lon  -80.1341})
(def working-line-opts        {:strokeColor "Green" :strokeWeight "3"})
(def polygon-opts             {:strokeColor "Blue"  :strokeWeight "1" :fillOpacity "0.3" :visible true})
(def selected-polygon-opts    (assoc polygon-opts :strokeColor "Red" :strokeWeight "2"))
(def incomplete-polygon-opts  {:visible false})
(def marker-opts              {})
  
(defc state                   nil)
(defc error                   nil)
(defc loading                 [])
(defc res                     nil)
(defc current-address         nil)

(defc= containers             (if res (into #{} (for [x (:polygons state)] (do (when (point-in-polygon res (:path x)) (:id x))))) #{}))
(defc= polygons               (mapv #(if (= (:status %) :complete) 
                                       (if (contains? containers (:id %)) (assoc % :opts selected-polygon-opts) (assoc % :opts polygon-opts)) 
                                       (assoc % :opts incomplete-polygon-opts))(:polygons state)))
(defc= complete-polygons      (into [] (filter #(= (:status %) :complete) (:polygons state))))
(defc= working-polygon        (first (filter #(= (:status %) :incomplete) polygons)))
(defc= polylines              (if working-polygon [{:path (:path working-polygon) :opts working-line-opts}]))
(defc= markers                (if working-polygon [(assoc (first (:path working-polygon)) :pos :start) (assoc (last (:path working-polygon)) :pos :end)]))

(def get-state        (mkremote 'castra.api/get-state         state error loading))
(def rmt-add-point    (mkremote 'castra.api/add-point         state error loading))
(def rmt-finalize     (mkremote 'castra.api/finalize-polygon  state error loading))
(def rmt-clearall     (mkremote 'castra.api/clear-polygons    state error loading))
(def rmt-pop-poly     (mkremote 'castra.api/pop-polygon-path  state error loading))
(def rmt-edit-poly    (mkremote 'castra.api/edit-polygon      state error loading))
(def rmt-geocode      (mkremote 'castra.api/address->latlng   res   error loading))

(add-initfn! get-state)

(defn marker-click [imap marker iwin pin evt]
  (when (= (:pos pin) :start) (rmt-finalize (:id @working-polygon)))
  (when (= (:pos pin) :end )  (rmt-pop-poly (:id @working-polygon))))

(defn click-polygon [imap google-polygon polygon evt]
  (rmt-edit-poly (:id @polygon)))

(defn geocode-address [address]
  (rmt-geocode address))

(defn add-point [imap evt]
  (let [latlng  (.-latLng evt)
        lat     (.lat latlng)
        lng     (.lng latlng)
        pnt     {:lat lat :lon lng}]
    (rmt-add-point pnt (:id @working-polygon))))

(defn close-polygon [imap evt]
  (rmt-finalize (:id @working-polygon)))
(defn remove-last-point []
  (rmt-pop-poly (:id @working-polygon)))

(defn check-address [address](rmt-geocode address))

(defn clear-polygons [] (rmt-clearall))

(cell= (.log js/console "[cntnr]" (clj->js containers)))
(cell= (.log js/console "[error]" (clj->js (:trace error)) ))
</script>

<html lang="en">
  <head><title>Territory Builder</title></head>
  <body>
    <b.container>
      <h1>Territory Builder</h1>
      <google-map
        css='{{ (cell= {:height "600px" :width "80%" :margin "0" :border "1px solid blue"}) }}'
        hoplon.google.jsapi.maps.center='{{ miami-beach }}'
        hoplon.google.jsapi.maps.map-click='{{ add-point }}'
        hoplon.google.jsapi.maps.map-rightclick='{{ close-polygon }}'
        hoplon.google.jsapi.maps.markers='{{ markers }}'
        hoplon.google.jsapi.maps.marker-click='{{ marker-click }}'
        hoplon.google.jsapi.maps.polygon-click='{{ click-polygon }}'
        hoplon.google.jsapi.maps.polylines='{{ polylines }}'
        hoplon.google.jsapi.maps.polygons='{{ polygons }}'
        hoplon.google.jsapi.maps.opts='{{ {:zoom 12} }}'/>
      <b.container>
        <input type="text" size="100" id="address" />
        <button on-click='{{ #(check-address (val-id :address)) }}'>check address</button>
        <button on-click='{{ #(clear-polygons) }}'>clear polygons</button>
      </b.container>
    </b.container>
  </body>
</html>
