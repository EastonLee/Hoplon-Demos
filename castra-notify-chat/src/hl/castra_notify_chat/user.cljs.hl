(ns castra-notify-chat.user
  (:require-macros
    [javelin.core :refer [defc defc=]])
  (:require
    [clojure.set :as cs]
    [clojure.string :as s]
    [javelin.core :as j :refer [cell]]
    [castra.core :as c :refer [mkremote]]
    [notify.notification-rpc :as nrpc]))

(defc error nil)
(defc= error-message (when error (.-message error)))
(def clear-error! #(reset! error nil))

(defc loading [])
(defc= loading? (seq loading))

(defc state {})

(defc started nil)
(defn boo! [started]
  (reset! state started))
(defc= startup (boo! started))

(defc= user
       (:user state))

(defc= show-login? (and started (not (:user state))))
(defc= show-app? (and started (:user state)))

(def session-startup!
  (mkremote 'castra-notify-chat.user-api/session-startup
            started
            error
            loading))

(def login!
  (mkremote 'castra-notify-chat.user-api/login
            state
            error
            loading))

(def register!
  (mkremote 'castra-notify-chat.user-api/register
            state
            error
            loading))

(def logoff!
  (mkremote 'castra-notify-chat.user-api/logoff state error loading))

(defn error-div []
  (div
    :id "error"
    :click clear-error!
    :slide-toggle error
    :css {:display "none"}
    (text "~{error-message}")))

(defn loading-div []
  (div
    :id "loading"
    :fade-toggle loading?
    :css {:display "none"}
    "loading..."))

(def register? (cell nil))
(def reg-link-text (cell= (if register? "log in" "register")))
(def login-text (cell= (if register? "register" "log in")))
(def toggle-register! #(swap! register? not))

(def log-reg! (fn [user pass1 pass2]
                (if @register?
                  (register! user pass1 pass2)
                  (login! user pass1))))

(defn login-div []
  (div
    :id "login-pane"
    :css {:display "none"}
    :toggle show-login?
    (let [user (cell "")
          pass (cell "")
          pass2 (cell "")]
      (form
        :submit #(log-reg! @user @pass @pass2)
        (table
          (tr
            (td (label "Username "))
            (td (input :type "text"
                       :autofocus "autofocus"
                       :value user
                       :change #(reset! user @%))))
          (tr
            (td (label "Password "))
            (td (input :type "password"
                       :value pass
                       :change #(reset! pass @%))))
          (tr
            :toggle register?
            (td (label "Confirm "))
            (td (input :type "password"
                       :value pass2
                       :change #(reset! pass2 @%))))
          (tr
            (td (button :type "submit" login-text))
            (td :style "text-align:right"
                (a :href "javascript:void(0)" :click toggle-register!
                   (text "~{reg-link-text}"))))))))
  )
