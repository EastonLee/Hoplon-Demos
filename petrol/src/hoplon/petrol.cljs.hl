(ns hoplon.petrol
  (:require
    [cljs.core.async :as async :refer [alts! put! pipe chan <! >!]]
    [clojure.set :as set]
    [petrol.core :as petrol])
  (:require-macros
    [cljs.core.async.macros :refer [go-loop]]))

(defn forward
  "Apply a function to every element that goes into a channel.
  (This is contramap for channels)."
  [f from]
  (let [to (chan)]
    (go-loop []
      (>! from (f (<! to)))
      (recur))
    to))

(defn start-message-loop!
  ([!app]
   (start-message-loop! !app #{}))

  ([!app initial-channels]
   (reset! petrol/!channels initial-channels)

   (let [ui-channel (async/chan)]
     (swap! petrol/!channels conj ui-channel)

     (go-loop []
       (when-let [cs (seq @petrol/!channels)]
         (let [[message channel] (alts! cs)]
           (when (nil? message)
             (swap! petrol/!channels disj channel))

           (when (satisfies? petrol/Message message)
             (swap! !app #(petrol/process-message message %)))

           (when (satisfies? petrol/EventSource message)
             (swap! petrol/!channels set/union (petrol/watch-channels message @!app))))
         (recur)))

     ui-channel)))
