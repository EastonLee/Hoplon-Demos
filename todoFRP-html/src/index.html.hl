<script type="text/hoplon">
  (page "index.html"
    (:require
      [hoplon.storage-atom :refer [local-storage]]))

  ;; utility functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defn pluralize
    [word count]
    (str word (when (not= 1 count) "s")))

  (def mapv-indexed (comp vec map-indexed))

  (defn dissocv [v i]
    (let [z (- (dec (count v)) i)]
      (cond (neg?  z) v
            (zero? z) (pop v)
            (pos?  z) (into (subvec v 0 i) (subvec v (inc i))))))

  (defn decorate [todo route editing i]
    (let [{done? :completed text :text} todo]
      (-> todo
          (assoc :editing (= editing i)
                 :visible (and (not (empty? text))
                               (or (= "#/" route)
                                   (and (= "#/active" route) (not done?))
                                   (and (= "#/completed" route) done?)))))))

  ;; persisted state cell (AKA: stem cell) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (def   state        (-> (cell []) (local-storage ::store)))

  ;; local state cells ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defc  loaded?      false)
  (defc  editing      nil)
  (def   route        (route-cell "#/"))
  (defc  new-todo-txt "")

  ;; formula cells (computed state) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defc= completed    (filter :completed state))
  (defc= active       (remove :completed state))
  (defc= plural-item  (pluralize "item" (count active)))
  (defc= todos        (mapv-indexed #(list %1 (decorate %2 route editing %1)) state))

  ;; state transition functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defn  todo        [t]   {:completed false :text t})
  (defn  destroy!    [i]   (swap! state dissocv i))
  (defn  done!       [i v] (swap! state update-in [i :completed] not))
  (defn  clear-done! [& _] (swap! state #(vec (remove :completed %))))
  (defn  new!        [t]   (when (not (empty? t)) (swap! state conj (todo t))))
  (defn  all-done!   [v]   (swap! state #(mapv (fn [x] (assoc x :completed v)) %)))
  (defn  editing!    [i v] (reset! editing (if v i nil)))
  (defn  text!       [i v] (if (empty? v) (destroy! i) (swap! state assoc-in [i :text] v)))
  (defn  reset-new-todo-txt []
    (reset! new-todo-txt ""))
</script>

<html lang="en">
  <head>
    <html-meta charset="utf8">
    <html-meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <link rel="stylesheet" href="base.css">
    <title>Hoplon â€¢ TodoMVC</title>
  </head>
  <body>
    <noscript>
      <div id="noscript">
        <p>Javascript is required to view this page.</p>
      </div>
    </noscript>
    <div>
      <section id="todoapp">
        <header id="header">
          <h1>todos</h1>
          <form submit="{{ #(do (new! @new-todo-txt)
                                (reset-new-todo-txt)
                                (.preventDefault %)) }}">
            <input
               id="new-todo"
               type="text"
               autofocus="autofocus"
               placeholder="What needs to be done?"
               value= "{{ new-todo-txt }}"
               change="{{ #(reset! new-todo-txt @%) }}"
               blur="{{ reset-new-todo-txt }}">
          </form>
        </header>
        <section
           id="main"
           toggle="{{ (cell= (not (and (empty? active) (empty? completed)))) }}">
          <input
             id="toggle-all"
             type="checkbox"
             attr="{{ (cell= {:checked (seq active)}) }}"
             click="{{ #(all-done! true) }}">
          <label for="toggle-all">Mark all as complete</label>
          <ul id="todo-list">
            <loop-tpl
               reverse="{{ true }}"
               bindings="{{ [[i {edit? :editing done? :completed todo-text :text show? :visible}] todos] }}">
              <li
                 class="{{ (cell= {:completed done? :editing edit?}) }}"
                 toggle="{{ show? }}">
                <div class="view" dblclick="{{ #(editing! @i true) }}">
                  <input
                     type="checkbox"
                     class="toggle"
                     attr="{{ (cell= {:checked done?}) }}"
                     click="{{ #(done! @i @%) }}">
                  <label><text>~{todo-text}</text></label>
                  <button
                     type="submit"
                     class="destroy"
                     click="{{ #(destroy! @i) }}"></button>
                </div>
                <form submit="{{ #(do (editing! @i false)
                                      (.preventDefault %)) }}">
                  <input
                     type="text"
                     class="edit"
                     value="{{ todo-text }}"
                     focus="{{ edit? }}"
                     blur="{{ #(when @edit? (editing! @i false)) }}"
                     change="{{ #(when @edit? (text! @i @%)) }}">
                </form>
              </li>
            </loop-tpl>
          </ul>
        </section>
        <footer
           id="footer"
           toggle="{{ (cell= (not (and (empty? active) (empty? completed)))) }}">
          <span id="todo-count">
            <strong><text>~(count active) </text></strong>
            <span><text>~{plural-item} left</text></span>
          </span>
          <ul id="filters">
            <li><a href="#/" class='{{ (cell= {:selected (= "#/" route)}) }}'>All</a></li>
            <li><a href="#/active" class='{{ (cell= {:selected (= "#/active" route)}) }}'>Active</a></li>
            <li><a href="#/completed" class='{{ (cell= {:selected (= "#/completed" route)}) }}'>Completed</a></li>
          </ul>
          <button
             type="submit"
             id="clear-completed"
             click="{{ #(clear-done!) }}">
            <text>Clear completed (~(count completed))</text>
          </button>
        </footer>
      </section>
      <footer id="info">
        <p>Double-click to edit a todo</p>
        <p>Part of <a href="http://github.com/hoplon/demos/">Hoplon demos</a></p>
      </footer>
    </div>
  </body>
</html>
