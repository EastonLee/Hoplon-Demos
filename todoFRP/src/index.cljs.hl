;; Copyright (c) Alan Dipert and Micha Niskin. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(page "index.html"
  (:require
    [hoplon.storage-atom :refer [local-storage]]))

;; utility functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn pluralize
  [word count]
  (str word (when (not= 1 count) "s")))

(def mapv-indexed (comp vec map-indexed))

(defn dissocv [v i]
  (let [z (- (dec (count v)) i)]
    (cond (neg?  z) v
          (zero? z) (pop v)
          (pos?  z) (into (subvec v 0 i) (subvec v (inc i))))))

(defn decorate [todo route editing i]
  (let [{done? :completed text :text} todo]
    (-> todo
        (assoc :editing (= editing i)
               :visible (and (not (empty? text))
                             (or (= "#/" route)
                                 (and (= "#/active" route) (not done?))
                                 (and (= "#/completed" route) done?)))))))

;; persisted state cell (AKA: stem cell) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def   state        (-> (cell []) (local-storage ::store)))

;; local state cells ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defc  loaded?      false)
(defc  editing      nil)
(def   route        (route-cell "#/"))

;; formula cells (computed state) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defc= completed    (filter :completed state))
(defc= active       (remove :completed state))
(defc= plural-item  (pluralize "item" (count active)))
(defc= todos        (mapv-indexed #(list %1 (decorate %2 route editing %1)) state))

;; state transition functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn  todo        [t]   {:completed false :text t})
(defn  destroy!    [i]   (swap! state dissocv i))
(defn  done!       [i v] (swap! state update-in [i :completed] not))
(defn  clear-done! [& _] (swap! state #(vec (remove :completed %))))
(defn  new!        [t]   (when (not (empty? t)) (swap! state conj (todo t))))
(defn  all-done!   [v]   (swap! state #(mapv (fn [x] (assoc x :completed v)) %)))
(defn  editing!    [i v] (reset! editing (if v i nil)))
(defn  text!       [i v] (if (empty? v) (destroy! i) (swap! state assoc-in [i :text] v)))

;; page ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(html :lang "en"
  (head
    (html-meta :charset "utf-8")
    (html-meta :http-equiv "X-UA-Compatible" :content "IE=edge,chrome=1")
    (link :rel "stylesheet" :href "base.css")
    (title "Hoplon â€¢ TodoMVC"))
  (body
    (noscript
      (div :id "noscript"
        (p "JavaScript is required to view this page.")))
    (div
      (section :id "todoapp"
        (header :id "header"
          (h1 "todos")
          (let [new-todo-txt (cell "")]
            (form
              :submit #(do (new! @new-todo-txt)
                           (reset! new-todo-txt "")
                           (.preventDefault %))
              (input
                :id "new-todo"
                :type "text"
                :autofocus true
                :placeholder "What needs to be done?"
                :value new-todo-txt
                :change #(reset! new-todo-txt @%)
                :blur   #(reset! new-todo-txt "")))))
        (section
          :id "main"
          :toggle (cell= (not (and (empty? active) (empty? completed))))
          (input
            :id "toggle-all"
            :type "checkbox"
            :attr (cell= {:checked (seq active)})
            :click #(all-done! true))
          (label :for "toggle-all"
            "Mark all as complete")
          (ul :id "todo-list"
            (loop-tpl
              :reverse true
              :bindings [[i {edit? :editing done? :completed todo-text :text show? :visible}] todos]
              (li
                :class (cell= {:completed done? :editing edit?})
                :toggle show?
                (div :class "view"
                  :dblclick #(editing! @i true)
                  (input
                    :type "checkbox"
                    :class "toggle"
                    :attr (cell= {:checked done?})
                    :click #(done! @i @%))
                  (label (text "~{todo-text}"))
                  (button
                    :type  "submit"
                    :class "destroy"
                    :click #(destroy! @i)))
                (form
                  :submit #(do (editing! @i false)
                               (.preventDefault %))
                  (input
                    :type   "text"
                    :class  "edit"
                    :value  todo-text
                    :focus  edit?
                    :blur   #(when @edit? (editing! @i false))
                    :change #(when @edit? (text! @i @%))))))))
        (footer
          :id "footer"
          :toggle (cell= (not (and (empty? active) (empty? completed))))
          (span :id "todo-count"
            (strong (text "~(count active) "))
            (span (text "~{plural-item} left")))
          (ul :id "filters"
            (li (a :href "#/"          :class (cell= {:selected (= "#/" route)})          "All"))
            (li (a :href "#/active"    :class (cell= {:selected (= "#/active" route)})    "Active"))
            (li (a :href "#/completed" :class (cell= {:selected (= "#/completed" route)}) "Completed")))
          (button
            :type  "submit"
            :id    "clear-completed"
            :click #(clear-done!)
            (text "Clear completed (~(count completed))"))))
      (footer :id "info"
        (p "Double-click to edit a todo")
        (p "Part of " (a :href "http://github.com/hoplon/demos/" "Hoplon demos"))))))
